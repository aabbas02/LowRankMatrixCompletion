clc
close all
clear all
dir = pwd;
% For linux, replace '\' with '/'
cd ..
%addpath(genpath('.\functionsMtrxSnsng'));
addpath(genpath('.\utils'));
cd(dir)    
%---------------------------------
r = 5;
n = 1000;
q = 1000;
same = 0;
MC = 1;
%------------------------
real = 1;
[Ustr,X,p] = getMovieLens(r);
n = size(X,1);
q = size(X,2);
%-------------------------------
numBlocksTry_ = [50,100,150,200,250,300];
% generate rank-r X*
%Ustr = orth(randi(1000,[n,r]));
%Bstr = randn(r,q);
%X  = Ustr*Bstr;
SDU0 = zeros(length(numBlocksTry_),MC); SDU0Cllps = zeros(length(numBlocksTry_),MC); SDU0Perm = zeros(length(numBlocksTry_),MC);
X0Err = zeros(length(numBlocksTry_),MC); X0CllpsErr = zeros(length(numBlocksTry_),MC);  X0PermErr = zeros(length(numBlocksTry_),MC); 
fill = "mean";
%fill = "both";
%------------------------
%-----------------------
[Xzeros, rowIdx, colIdx, Xcol, Xrow] = processMatrix(X, n, q, p,real);
for i = 1 : length(numBlocksTry_)
    numBlocksTry = numBlocksTry_(i);
    for mc = 1 : MC
        rowIdxPerm = cell(q,1);
        XcolPerm = cell(q, 1); 
        XzerosPerm = zeros(n,q);
        XzerosCllps = zeros(n,q);
        %if same
        %    pi_map = get_permutation_r(n,r_);
        %end
        for k = 1 : q
            l_k = length(rowIdx{k});
            numBlocks = min(numBlocksTry,l_k);
            r_ = floor(l_k/numBlocks)*ones(numBlocks,1);
            if mod(l_k,numBlocks) > 0
                r_(end) = r_(end) + l_k - floor(l_k/numBlocks)*numBlocks;
            end
            if ~same
                pi_map = get_permutation_r(l_k,r_);
            end
            rowIdxPerm{k} = rowIdx{k}(pi_map);
            XcolPerm{k} = Xzeros(rowIdxPerm{k},k);
            XzerosPerm(rowIdxPerm{k},k) = Xcol{k};
            %AkCllps_{k} = zeros(numBlocks,n);
            for s = 1 : numBlocks
                start = sum(r_(1:s)) - r_(s) + 1;
                stop = start + r_(s) - 1;
                if fill == "mean"
                    % Either replace all entries by average
                    XzerosCllps(rowIdxPerm{k}(start:stop),k) = sum(XcolPerm{k}(start:stop))/r_(s) + 0*1e0*randn(length(start:stop),1);
                else
                    % Or replace half by average, half by median
                    XzerosCllps(rowIdxPerm{k}(start:stop),k) = sum(XcolPerm{k}(start:stop))/r_(s);
                    XzerosCllps(rowIdxPerm{k}(floor(start +(stop-start)/2):stop),k) = median(XcolPerm{k}(start:stop));
                end
                %AkCllps_{k}(s,start:stop) = ones(1,r_(s));
            end
        end
        [U0, S0, V0] = svds(Xzeros,r);
        U0 = U0(:,1:r); S0 = S0(1:r,1:r); V0 = V0(:,1:r);
        X0 = U0*S0*V0';
        X0Err(i,mc) = norm(X0(idx) - Xzeros(idx))/norm(Xzero(idx));
        SDU0(i,mc) = norm(Ustr - U0*(U0'*Ustr));
        %-----------------------------------
        %norm(Xzeros - XzerosCllps,'fro')
        [U0Cllps, S0Cllps, V0Cllps] = svds(XzerosCllps,r);
        U0Cllps = U0Cllps(:,1:r); S0Cllps = S0Cllps(1:r,1:r); V0Cllps = V0Cllps(:,1:r);
        X0Cllps = U0Cllps*S0Cllps*V0Cllps';
        X0CllpsErr(i,mc) = norm(X0Cllps(idx) - Xzeros(idx))/norm(Xzeros(idx));
        SDU0Cllps(i,mc) = norm(Ustr - U0Cllps*(U0Cllps'*Ustr));
        %---------------------------------------
        [U0Perm, S0Perm, V0Perm] = svds(XzerosPerm,r);
        U0Perm = U0Perm(:,1:r); S0Perm = S0Perm(1:r,1:r); V0Perm = V0Perm(:,1:r);
        X0Perm = U0Perm*S0Perm*V0Perm';        
        X0PermErr(i,mc) = norm(X0Perm(idx) - Xzeros(idx))/norm(Xzeros(idx));
        SDU0Perm(i,mc) = norm(Ustr - U0Perm*(U0Perm'*Ustr));    
        mc
    end
end
SDU0 = sum(SDU0,2)/MC;
SDU0Cllps = sum(SDU0Cllps,2)/MC;
SDU0Perm = sum(SDU0Perm,2)/MC;
%disp(C)
plotRslts(SDU0, SDU0Cllps, SDU0Perm,n,q,r,p,numBlocksTry_,MC,same,fill);

function plotRslts(SDU0, SDU0Cllps, SDU0Perm,n,q,r,p,numBlocks_,MC,same,fill)
    figure;
    plot(numBlocks_,SDU0, ...
        'DisplayName', 'SDVals U^{(0)}', 'LineWidth', 1.45, 'Marker', 'o', 'MarkerSize', 7);
    plot(numBlocks_,SDU0Cllps, ...
        'DisplayName', 'SDVals Cllps', 'LineWidth', 1.45, 'Marker', 'o', 'MarkerSize', 7);
    hold on
    plot(numBlocks_,SDU0Perm, ...
        'DisplayName', 'SDVals Naive', 'LineWidth', 1.45, 'Marker', 'o', 'MarkerSize', 7);
    grid("on")
    xticks(numBlocks_);
    %-------------------------------
    title("LRMC Init. n = " + n + ", q = " + q +...
          ", r = " + r + ", p = " + p  +  ", MC = " + MC + ", same = " + same + ", fill = " + fill,...
           'Interpreter', 'Latex', 'FontSize',11)
    %--------------------------------
    legend('Interpreter', 'Latex', 'Fontsize', 9);
    %ylabel("$SD(U^{(0)},U^*)$","FontSize",14,'Interpreter','Latex')
    ylabel("Initialization Error", "FontSize",11,"Interpreter","Latex")
    xlabel('number of blocks', 'FontSize',14, 'Interpreter','Latex')
    stringTitle = ['LRMC_Init_MC_', num2str(MC), ...
                   '_n_', num2str(n), '_q_', num2str(q), '_r_', num2str(r), '_p_', num2str(p),'_numBlocks_', num2str(max(numBlocks_)), '_same_',num2str(same),'_fill_',num2str(fill)];
    
    savefig([stringTitle, '.fig']);
end
function [Xzeros, rowIdx, colIdx, Xcol, Xrow] = processMatrix(X, n, q, p,real)
    % Randomly select indices based on probability p
    if real
        idx = find(X > 0);
    else
        idx = randperm(n * q);
        idx = idx(1:round(p * n * q));
        idxC = setdiff(1:n * q, idx);
    end
    
    % Convert linear indices to subscripts
    [row, col] = ind2sub([n, q], idx);

    % Instantiate Y = X_Omega (Observed entries)
    Xzeros = zeros(n, q);
    Xzeros(idx) = X(idx);

    % Initialize cell arrays
    rowIdx = cell(q, 1); 
    colIdx = cell(n, 1);
    Xcol = cell(q, 1); 
    Xrow = cell(n, 1);
    % Parallel processing
    parfor j = 1:q
        rowIdx{j} = row(col == j);
        Xcol{j} = X(rowIdx{j}, j);
    end
    parfor j = 1:n
        colIdx{j} = col(row == j);
        Xrow{j} = X(j, colIdx{j})';        
    end
end
%---
function [Ustr,X,p] = getMovieLens(r)
    %A = readmatrix("ratings.xlsx");
    %--------------------
    %load("ratings1M.mat");
    %A = ratings1M;
    %--------------------
    load("ratings10M.mat")
    n = max(A(:,1));
    q = max(A(:,2));
    X = zeros(n,q);
    num = 0;
    disp(num)
    for k = 1 : size(A,1)
        i = A(k,1);
        j = A(k,2);
        X(i,j) = A(k,3);
        num = num + 1;
        %if mod(k,100000) == 0
        %    size(A,1),k
        %end
    end
    p = num/(n*q);
    %X = X';
    X = X(1:20000,1:20000);
    [Ustr,~,~] = svds(X,r);
    Ustr = Ustr(:,1:r);
end
